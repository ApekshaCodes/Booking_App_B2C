{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI in .env.local');\n}\n\nlet cached = (global as any).mongoose;\n\nif (!cached) {\n  cached = (global as any).mongoose = { conn: null, promise: null };\n}\n\nexport default async function connectToDatabase() {\n  console.log('üîå Connecting to MongoDB...');\n  if (cached.conn) return cached.conn;\n\n  if (!cached.promise) {\n    console.log('üåê No cached connection found, creating a new one...');\n    cached.promise = mongoose.connect(MONGODB_URI, {\n      dbName: 'bookingApp', \n      bufferCommands: false,\n    });\n\n    console.log('üîó Mongoose connection promise created');\n  }\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,AAAC,OAAe,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,AAAC,OAAe,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEe,eAAe;IAC5B,QAAQ,GAAG,CAAC;IACZ,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,QAAQ;YACR,gBAAgB;QAClB;QAEA,QAAQ,GAAG,CAAC;IACd;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/models/order.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst orderSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  destination: String,\n  last_travel_date: Date,\n  details: String, // e.g., ‚Äúflight + hotel‚Äù\n});\n\nexport default mongoose.models.Order || mongoose.model('Order', orderSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,QAAQ;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC5E,aAAa;IACb,kBAAkB;IAClB,SAAS;AACX;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/models/user.ts"],"sourcesContent":["import mongoose, { Schema, model, models, Document } from 'mongoose';\n\ninterface IUser extends Document {\n  name: string;\n  email: string;\n  password: string;\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nconst User = models.User || model<IUser>('User', userSchema);\n\nexport default User;\n"],"names":[],"mappings":";;;AAAA;;AAQA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC3C,GACA;IACE,YAAY;AACd;AAGF,MAAM,OAAO,yGAAA,CAAA,SAAM,CAAC,IAAI,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAS,QAAQ;uCAElC","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/app/api/seed/bookings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport connectToDatabase from '../../../../lib/db';\nimport Order from '../../../../models/order';\nimport User from '../../../../models/user';\n\nexport async function POST(req: NextRequest) {\n  try {\n    await connectToDatabase();\n\n    const users = await User.find(); // get all users\n    if (users.length === 0) {\n      return NextResponse.json({ error: 'No users found' }, { status: 400 });\n    }\n\n    const user = users[0]; // seed for first user\n\n    const fakeBookings = [\n      {\n        userId: user._id,\n        destination: 'Dubai',\n        last_travel_date: new Date('2025-06-15'),\n        details: 'Flight + Hotel',\n      },\n      {\n        userId: user._id,\n        destination: 'Paris',\n        last_travel_date: new Date('2024-12-01'),\n        details: 'Hotel only',\n      },\n      {\n        userId: user._id,\n        destination: 'Goa',\n        last_travel_date: new Date('2025-07-10'),\n        details: 'Flight + Resort',\n      }\n    ];\n\n    const inserted = await Order.insertMany(fakeBookings);\n\n    return NextResponse.json({ message: 'Bookings seeded', inserted });\n  } catch (error) {\n    console.error('‚ùå Seeding error:', error);\n    return NextResponse.json({ error: 'Failed to seed bookings' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,QAAQ,MAAM,uHAAA,CAAA,UAAI,CAAC,IAAI,IAAI,gBAAgB;QACjD,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,OAAO,KAAK,CAAC,EAAE,EAAE,sBAAsB;QAE7C,MAAM,eAAe;YACnB;gBACE,QAAQ,KAAK,GAAG;gBAChB,aAAa;gBACb,kBAAkB,IAAI,KAAK;gBAC3B,SAAS;YACX;YACA;gBACE,QAAQ,KAAK,GAAG;gBAChB,aAAa;gBACb,kBAAkB,IAAI,KAAK;gBAC3B,SAAS;YACX;YACA;gBACE,QAAQ,KAAK,GAAG;gBAChB,aAAa;gBACb,kBAAkB,IAAI,KAAK;gBAC3B,SAAS;YACX;SACD;QAED,MAAM,WAAW,MAAM,wHAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QAExC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAmB;QAAS;IAClE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}