{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI in .env.local');\n}\n\nlet cached = (global as any).mongoose;\n\nif (!cached) {\n  cached = (global as any).mongoose = { conn: null, promise: null };\n}\n\nexport default async function connectToDatabase() {\n  console.log('üîå Connecting to MongoDB...');\n  if (cached.conn) return cached.conn;\n\n  if (!cached.promise) {\n    console.log('üåê No cached connection found, creating a new one...');\n    cached.promise = mongoose.connect(MONGODB_URI, {\n      dbName: 'bookingApp', \n      bufferCommands: false,\n    });\n\n    console.log('üîó Mongoose connection promise created');\n  }\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,AAAC,OAAe,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,AAAC,OAAe,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEe,eAAe;IAC5B,QAAQ,GAAG,CAAC;IACZ,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,QAAQ;YACR,gBAAgB;QAClB;QAEA,QAAQ,GAAG,CAAC;IACd;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/models/user.ts"],"sourcesContent":["import mongoose, { Schema, model, models, Document } from 'mongoose';\n\ninterface IUser extends Document {\n  name: string;\n  email: string;\n  password: string;\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nconst User = models.User || model<IUser>('User', userSchema);\n\nexport default User;\n"],"names":[],"mappings":";;;AAAA;;AAQA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC3C,GACA;IACE,YAAY;AACd;AAGF,MAAM,OAAO,yGAAA,CAAA,SAAM,CAAC,IAAI,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAS,QAAQ;uCAElC","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/lib/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET!;\n\nexport function generateToken(payload: object) {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '15m' });\n}\n\nexport function generateRefreshToken(payload: object) {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\n}\n\nexport function verifyToken(token: string) {\n  return jwt.verify(token, JWT_SECRET);\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAElC,SAAS,cAAc,OAAe;IAC3C,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAM;AAC1D;AAEO,SAAS,qBAAqB,OAAe;IAClD,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,SAAS,YAAY,KAAa;IACvC,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;AAC3B","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/app/api/user/profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport connectToDatabase from '../../../../lib/db';\nimport User from '../../../../models/user';\nimport { verifyToken } from '../../../../lib/auth';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const authHeader = req.headers.get('authorization');\n    const token = authHeader?.split(' ')[1];\n\n    if (!token) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const decoded: any = verifyToken(token);\n    const userId = decoded.userId;\n\n    await connectToDatabase();\n    const user = await User.findById(userId).select('-password');\n\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ user }, { status: 200 });\n  } catch (error) {\n    console.error('‚ùå GET /api/user/profile error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function PUT(req: NextRequest) {\n  try {\n    const authHeader = req.headers.get('authorization');\n    const token = authHeader?.split(' ')[1];\n\n    if (!token) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const decoded: any = verifyToken(token);\n    const userId = decoded.userId;\n\n    const { name, email } = await req.json();\n\n    if (!name || !email) {\n      return NextResponse.json({ error: 'Name and email are required' }, { status: 400 });\n    }\n\n    await connectToDatabase();\n\n    const updatedUser = await User.findByIdAndUpdate(\n      userId,\n      { name, email },\n      { new: true, runValidators: true }\n    ).select('-password');\n\n    if (!updatedUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ message: 'Profile updated', user: updatedUser });\n  } catch (error) {\n    console.error('‚ùå PUT /api/user/profile error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;QACnC,MAAM,QAAQ,YAAY,MAAM,IAAI,CAAC,EAAE;QAEvC,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,UAAe,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE;QACjC,MAAM,SAAS,QAAQ,MAAM;QAE7B,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAiB,AAAD;QACtB,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,QAAQ,MAAM,CAAC;QAEhD,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAK,GAAG;YAAE,QAAQ;QAAI;IACnD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;QACnC,MAAM,QAAQ,YAAY,MAAM,IAAI,CAAC,EAAE;QAEvC,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,UAAe,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE;QACjC,MAAM,SAAS,QAAQ,MAAM;QAE7B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEtC,IAAI,CAAC,QAAQ,CAAC,OAAO;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,cAAc,MAAM,uHAAA,CAAA,UAAI,CAAC,iBAAiB,CAC9C,QACA;YAAE;YAAM;QAAM,GACd;YAAE,KAAK;YAAM,eAAe;QAAK,GACjC,MAAM,CAAC;QAET,IAAI,CAAC,aAAa;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAmB,MAAM;QAAY;IAC3E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}