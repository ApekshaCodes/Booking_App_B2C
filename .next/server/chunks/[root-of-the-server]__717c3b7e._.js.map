{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI as string;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI in .env.local');\n}\n\nlet cached = (global as any).mongoose;\n\nif (!cached) {\n  cached = (global as any).mongoose = { conn: null, promise: null };\n}\n\nexport default async function connectToDatabase() {\n  console.log('üîå Connecting to MongoDB...');\n  if (cached.conn) return cached.conn;\n\n  if (!cached.promise) {\n    console.log('üåê No cached connection found, creating a new one...');\n    cached.promise = mongoose.connect(MONGODB_URI, {\n      dbName: 'bookingApp', \n      bufferCommands: false,\n    });\n\n    console.log('üîó Mongoose connection promise created');\n  }\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,AAAC,OAAe,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,AAAC,OAAe,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEe,eAAe;IAC5B,QAAQ,GAAG,CAAC;IACZ,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,QAAQ;YACR,gBAAgB;QAClB;QAEA,QAAQ,GAAG,CAAC;IACd;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/models/order.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst orderSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  destination: String,\n  last_travel_date: Date,\n  details: String, // e.g., ‚Äúflight + hotel‚Äù\n});\n\nexport default mongoose.models.Order || mongoose.model('Order', orderSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,QAAQ;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC5E,aAAa;IACb,kBAAkB;IAClB,SAAS;AACX;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/lib/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET!;\n\nexport function generateToken(payload: object) {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '15m' });\n}\n\nexport function generateRefreshToken(payload: object) {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\n}\n\nexport function verifyToken(token: string) {\n  return jwt.verify(token, JWT_SECRET);\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAElC,SAAS,cAAc,OAAe;IAC3C,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAM;AAC1D;AAEO,SAAS,qBAAqB,OAAe;IAClD,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,SAAS,YAAY,KAAa;IACvC,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;AAC3B","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/apekshapathak/Desktop/Booking_App_B2C/src/app/api/bookings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport connectToDatabase from '../../../lib/db';\nimport Order from '../../../models/order';\nimport { verifyToken } from '../../../lib/auth';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const token = req.headers.get('authorization')?.split(' ')[1];\n    if (!token) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const decoded: any = verifyToken(token);\n    const userId = decoded.userId;\n\n    const { searchParams } = new URL(req.url);\n    const status = searchParams.get('status');\n\n    if (!status || !['upcoming', 'completed'].includes(status)) {\n      return NextResponse.json({ error: 'Invalid or missing status' }, { status: 400 });\n    }\n\n    await connectToDatabase();\n\n    const today = new Date();\n    const condition =\n      status === 'upcoming'\n        ? { last_travel_date: { $gte: today } }\n        : { last_travel_date: { $lt: today } };\n\n    const bookings = await Order.find({ userId, ...condition });\n\n    return NextResponse.json({ bookings });\n  } catch (error) {\n    console.error('‚ùå GET /api/bookings error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,MAAM,IAAI,CAAC,EAAE;QAC7D,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,UAAe,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE;QACjC,MAAM,SAAS,QAAQ,MAAM;QAE7B,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,UAAU,CAAC;YAAC;YAAY;SAAY,CAAC,QAAQ,CAAC,SAAS;YAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,QAAQ,IAAI;QAClB,MAAM,YACJ,WAAW,aACP;YAAE,kBAAkB;gBAAE,MAAM;YAAM;QAAE,IACpC;YAAE,kBAAkB;gBAAE,KAAK;YAAM;QAAE;QAEzC,MAAM,WAAW,MAAM,wHAAA,CAAA,UAAK,CAAC,IAAI,CAAC;YAAE;YAAQ,GAAG,SAAS;QAAC;QAEzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAS;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}